import React, { useState } from 'react';
import {
    View,
    Text,
    TextInput,
    TouchableOpacity,
    StyleSheet,
    Image,
    Dimensions,
    Modal,
    Alert,
} from 'react-native';

const { width } = Dimensions.get('window');

const TutorSignupScreen = ({ navigation }) => {
    const [form, setForm] = useState({
        name: '',
        email: '',
        phone: '',
        dob: '',
        password: '',
        confirmPassword: '',
    });

    const [errors, setErrors] = useState({});
    const [modalVisible, setModalVisible] = useState(false);

    const handleChange = (key, value) => {
        setForm({ ...form, [key]: value });
        setErrors((prev) => ({ ...prev, [key]: null })); // clear error when editing
    };

    const validate = () => {
        const newErrors = {};

        if (!form.name.trim()) newErrors.name = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
        if (!form.email.trim()) {
            newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
        } else if (!/^\S+@\S+\.\S+$/.test(form.email)) {
            newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
        }

        if (!form.phone.trim()) {
            newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
        } else if (!/^\d{9,11}$/.test(form.phone)) {
            newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
        }

        if (!form.dob.trim()) newErrors.dob = 'Ng√†y sinh l√† b·∫Øt bu·ªôc';
        if (!form.password.trim()) {
            newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
        } else if (form.password.length < 6) {
            newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i t·ª´ 6 k√Ω t·ª±';
        }

        if (!form.confirmPassword.trim()) {
            newErrors.confirmPassword = 'Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u';
        } else if (form.confirmPassword !== form.password) {
            newErrors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleRegister = () => {
        if (!validate()) return;

        setModalVisible(true);
        setTimeout(() => {
            setModalVisible(false);
            navigation.navigate('RoleSelection');
        }, 2000);
    };

    const renderInput = (label, key, placeholder, keyboardType = 'default', secure = false) => (
        <>
            <Text style={styles.label}>{label}</Text>
            <TextInput
                placeholder={placeholder}
                style={[
                    styles.input,
                    errors[key] && { borderColor: 'red' },
                ]}
                keyboardType={keyboardType}
                secureTextEntry={secure}
                value={form[key]}
                onChangeText={(text) => handleChange(key, text)}
            />
            {errors[key] && <Text style={styles.error}>{errors[key]}</Text>}
        </>
    );

    return (
        <View style={styles.container}>
            <Image source={require('../../assets/logo1.png')} style={styles.logo} />
            <Text style={styles.title}>ƒêƒÉng K√Ω</Text>

            <View style={styles.inputContainer}>
                {renderInput('H·ªç V√† T√™n', 'name', 'Nguy·ªÖn VƒÉn A')}
                {renderInput('Email', 'email', 'example@email.com', 'email-address')}
                {renderInput('S·ªë ƒêi·ªán Tho·∫°i', 'phone', '0123456789', 'phone-pad')}
                {renderInput('NƒÉm Sinh', 'dob', 'DD/MM/YYYY')}
                {renderInput('M·∫≠t Kh·∫©u', 'password', 'M·∫≠t kh·∫©u', 'default', true)}
                {renderInput('Nh·∫≠p L·∫°i M·∫≠t Kh·∫©u', 'confirmPassword', 'Nh·∫≠p l·∫°i m·∫≠t kh·∫©u', 'default', true)}
            </View>

            <Text style={styles.policy}>
                B·∫±ng c√°ch ti·∫øp t·ª•c, b·∫°n ƒë·ªìng √Ω v·ªõi{' '}
                <Text style={{ fontWeight: 'bold' }}>ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</Text> v√†{' '}
                <Text style={{ fontWeight: 'bold' }}>Ch√≠nh s√°ch b·∫£o m·∫≠t</Text>.
            </Text>

            <TouchableOpacity style={styles.button} onPress={handleRegister}>
                <Text style={styles.buttonText}>ƒêƒÉng K√Ω</Text>
            </TouchableOpacity>

            <Text style={styles.loginHint}>
                B·∫°n ƒë√£ c√≥ t√†i kho·∫£n? <Text style={{ textDecorationLine: 'underline' }}>ƒêƒÉng Nh·∫≠p ngay</Text>
            </Text>

            {/* Modal ƒêƒÉng k√Ω th√†nh c√¥ng */}
            <Modal transparent visible={modalVisible} animationType="fade">
                <View style={styles.modalContainer}>
                    <View style={styles.modalBox}>
                        <Text style={styles.modalTitle}>ƒêƒÉng K√Ω Th√†nh C√¥ng!</Text>
                        <Text style={styles.modalIcon}>üë§</Text>
                        <Text style={styles.modalMessage}>ƒê√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!</Text>
                    </View>
                </View>
            </Modal>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fffefb',
        alignItems: 'center',
        paddingHorizontal: 24,
        paddingTop: 50,
    },
    logo: {
        width: width * 0.35,
        height: 120,
        resizeMode: 'contain',
        marginBottom: 4,
    },
    title: {
        fontSize: 28,
        color: '#007bff',
        fontWeight: 'bold',
        marginBottom: 20,
    },
    inputContainer: {
        width: '100%',
    },
    label: {
        marginBottom: 6,
        fontSize: 18,
        fontWeight: '500',
        color: '#000',
    },
    input: {
        width: '100%',
        borderWidth: 1,
        borderColor: '#999',
        borderRadius: 25,
        paddingHorizontal: 16,
        paddingVertical: 10,
        fontSize: 15,
        backgroundColor: '#fff',
        marginBottom: 4,
    },
    error: {
        color: 'red',
        fontSize: 13,
        marginBottom: 8,
        paddingLeft: 10,
    },
    policy: {
        fontSize: 13,
        color: '#333',
        textAlign: 'center',
        marginVertical: 12,
        paddingHorizontal: 8,
    },
    button: {
        backgroundColor: '#31B7EC',
        paddingVertical: 14,
        paddingHorizontal: 32,
        borderRadius: 25,
        marginVertical: 8,
        width: '100%',
        alignItems: 'center',
    },
    buttonText: {
        color: '#fff',
        fontSize: 20,
        fontWeight: 'bold',
    },
    loginHint: {
        fontSize: 13,
        color: '#333',
        marginTop: 10,
    },
    modalContainer: {
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.4)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    modalBox: {
        width: '75%',
        backgroundColor: '#fff',
        padding: 30,
        borderRadius: 20,
        alignItems: 'center',
    },
    modalTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 10,
    },
    modalMessage: {
        fontSize: 15,
        marginTop: 10,
        color: '#444',
        textAlign: 'center',
    },
    modalIcon: {
        fontSize: 40,
        color: '#31B7EC',
    },
});

export default TutorSignupScreen;
